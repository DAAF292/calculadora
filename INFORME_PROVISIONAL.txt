### **Informe de Diseño e Implementación de la Calculadora Interactiva**

#### **1. Introducción**
Este informe detalla las decisiones de diseño clave y los principales desafíos encontrados en el desarrollo de una aplicación de calculadora interactiva en JavaScript. La aplicación permite realizar operaciones básicas (suma, resta, multiplicación, división, y raíz cuadrada), y cuenta con funcionalidades adicionales como el historial de operaciones.

#### **2. Decisiones de Diseño**

**a. Estructura del Menú Interactivo**  
Se decidió implementar un menú interactivo usando `prompt()` para ofrecer una experiencia sencilla en consola. Este menú permite seleccionar operaciones y gestionar el flujo de usuario de manera amigable.

**b. Separación de Funciones de Cálculo**  
Cada operación (suma, resta, multiplicación, etc.) se desarrolló en funciones independientes. Esto facilita la mantenibilidad y permite agregar o modificar operaciones sin afectar otras partes del código.

**c. Gestión de Historial**  
Se optó por utilizar un arreglo (`historial`) para almacenar y mostrar las operaciones realizadas. Este historial se almacena en formato de texto para fácil visualización y manejo.

**d. Validación de Entradas**  
Para mejorar la robustez, se diseñó una función de validación (`validarInput()`) que revisa la validez de las entradas de usuario. Por ejemplo, se controla la división entre cero y se previenen operaciones con valores inválidos.

**e. Estructura Modular**  
La implementación se organizó en módulos funcionales (e.g., menú, cálculo, historial), siguiendo principios de modularidad. Esto facilita tanto la comprensión como el escalado de la aplicación en el futuro.

#### **3. Desafíos Encontrados**

**a. Validación de Operaciones Matemáticas**  
La implementación de la función de raíz cuadrada presentó desafíos en cuanto a la validación de números negativos, dado que JavaScript no admite la raíz cuadrada de valores negativos (devolvería `NaN`). Se resolvió con una validación previa para notificar al usuario.

**b. Manejo del Historial**  
Se presentó el reto de manejar el historial en memoria de manera adecuada. Se optó por almacenar el historial como una cadena concatenada que es fácil de visualizar, pero esta implementación tiene limitaciones si se deseara mantener el historial persistente o manipulable.

**c. Control de Flujos de Entrada y Salida**  
El uso de `prompt()` y `alert()` para la entrada y salida en consola presentó un desafío en cuanto a la continuidad de uso, ya que estos métodos detienen la ejecución hasta recibir una respuesta. Aunque simplifica el desarrollo, podría no ser la opción óptima en una aplicación de interfaz gráfica o con grandes volúmenes de datos.

**d. Diseño de la Función de Cálculo Centralizada**  
Al centralizar las operaciones en una función (`operaciones()`), fue necesario gestionar casos especiales como la división y la raíz cuadrada, que tienen condiciones específicas. Se consideraron y trataron en esta función, pero su estructura podría volverse compleja si se agregan más operaciones avanzadas en el futuro.

#### **4. Conclusión**
La aplicación de calculadora interactiva se implementó con un diseño modular, con validaciones adecuadas y una experiencia sencilla en consola. Las decisiones de diseño se orientaron a la simplicidad y escalabilidad, mientras que los principales desafíos se resolvieron a través de validaciones y gestión de flujos. Se identifican áreas de mejora, especialmente en la persistencia del historial y en el manejo de entradas y salidas para una versión con interfaz gráfica.
